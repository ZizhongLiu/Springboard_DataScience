1. Introduction to joins
- Inner join
    -- Select name fields (with alias) and region 
    SELECT cities.name AS city, countries.name AS country, region
    FROM cities
      INNER JOIN countries
        ON cities.country_code = countries.code;

- Inner join (2)
    -- Select fields with aliases
    SELECT c.code AS country_code, name, year, inflation_rate
    FROM countries AS c
      -- Join to economies (alias e)
      INNER JOIN economies AS e
        -- Match on code
        ON c.code = e.code;
        
- Inner join (3)
    -- Select fields
    SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
      -- From countries (alias as c)
      FROM countries AS c
      -- Join to populations (as p)
      INNER JOIN populations AS p
        -- Match on country code
        ON c.code = p.country_code
      -- Join to economies (as e)
      INNER JOIN economies AS e
        -- Match on country code and year
        ON c.code = e.code AND e.year = p.year;

- Inner join with using
    -- Select fields
    SELECT c.name AS country, continent, l.name AS language, official
      -- From countries (alias as c)
      FROM countries AS c
      -- Join to languages (as l)
      INNER JOIN languages AS l
        -- Match using code
        USING(code);

- Self-join
    -- Select fields with aliases
    SELECT p1.country_code,
           p1.size AS size2010, 
           p2.size AS size2015,
           -- Calculate growth_perc
           ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
    -- From populations (alias as p1)
    FROM populations AS p1
      -- Join to itself (alias as p2)
      INNER JOIN populations AS p2
        -- Match on country code
        ON p1.country_code = p2.country_code
            -- and year (with calculation)
            AND p1.year = p2.year - 5;

- Case when and then
    SELECT name, continent, code, surface_area,
        -- First case
        CASE WHEN surface_area > 2000000 THEN 'large'
            -- Second case
            WHEN surface_area > 350000 THEN 'medium'
            -- Else clause + end
            ELSE 'small' END
            -- Alias name
            AS geosize_group
    -- From table
    FROM countries;

- Inner challenge
    SELECT country_code, size,
      CASE WHEN size > 50000000
                THEN 'large'
           WHEN size > 1000000
                THEN 'medium'
           ELSE 'small' END
           AS popsize_group
    INTO pop_plus       
    FROM populations
    WHERE year = 2015;

-- Select fields
    select name, continent, geosize_group, popsize_group
    -- From countries_plus (alias as c)
    from countries_plus as c
      -- Join to pop_plus (alias as p)
      INNER join pop_plus as p
        -- Match on country code
        on c.code = p.country_code
    -- Order the table    
    order by geosize_group;

2. Outer joins and cross joins
- Left Join
    -- Select the city name (with alias), the country code,
    -- the country name (with alias), the region,
    -- and the city proper population
    SELECT c1.name AS city, code, c2.name AS county,
           region, city_proper_pop
    -- From left table (with alias)
    FROM cities AS c1
      -- Join to right table (with alias)
      INNER JOIN countries AS c2
        -- Match on country code
        ON c1.country_code = c2.code
    -- Order by descending country code
    ORDER BY code DESC;

    SELECT c1.name AS city, code, c2.name AS country,
           region, city_proper_pop
    FROM cities AS c1
      -- Join right table (with alias)
      LEFT JOIN countries AS c2
        -- Match on country code
        ON c1.country_code = c2.code
    -- Order by descending country code
    ORDER BY code DESC;

- Left join (2)
    Select c.name AS country, local_name, l.name AS language, percent
    -- From left table (alias as c)
    FROM countries AS c
      -- Join to right table (alias as l)
      inner JOIN languages AS l
        -- Match on fields
        ON c.code = l.code
    -- Order by descending country
    ORDER BY country desc;

    SELECT c.name AS country, local_name, l.name AS language, percent
    -- From left table (alias as c)
    FROM countries AS c
      -- Join to right table (alias as l)
      left JOIN languages AS l
        -- Match on fields
        ON c.code = l.code
    -- Order by descending country
    ORDER BY country DESC;

- Left join (3)
    -- Select name, region, and gdp_percapita
    SELECT name, region, gdp_percapita
    -- From countries (alias as c)
    FROM countries AS c
      -- Left join with economies (alias as e)
      LEFT JOIN economies AS e
        -- Match on code fields
        ON c.code = e.code
    -- Focus on 2010
    WHERE year = 2010;

    -- Select fields
    SELECT region, avg(gdp_percapita) AS avg_gdp
    -- From countries (alias as c)
    FROM countries AS c
      -- Left join with economies (alias as e)
      LEFT JOIN economies AS e
        -- Match on code fields
        ON c.code = e.code
    -- Focus on 2010
    WHERE year = 2010
    -- Group by region
    GROUP BY region;

    -- Select fields
    SELECT region, AVG(gdp_percapita) AS avg_gdp
    -- From countries (alias as c)
    from countries as c
      -- Left join with economies (alias as e)
      left join economies as e
        -- Match on code fields
        on c.code = e.code
    -- Focus on 2010
    where year = 2010
    -- Group by region
    group by region
    -- Order by descending avg_gdp
    order by avg_gdp desc;

- Right join
    -- convert this code to use RIGHT JOINs instead of LEFT JOINs
    /*
    SELECT cities.name AS city, urbanarea_pop, countries.name AS country,
           indep_year, languages.name AS language, percent
    FROM cities
      LEFT JOIN countries
        ON cities.country_code = countries.code
      LEFT JOIN languages
        ON countries.code = languages.code
    ORDER BY city, language;
    */

    SELECT cities.name AS city, urbanarea_pop, countries.name AS country,
           indep_year, languages.name AS language, percent
    FROM languages
      RIGHT JOIN countries
        ON languages.code = countries.code
      RIGHT JOIN cities
        ON countries.code = cities.country_code

    ORDER BY city, language;

- Full Join
    SELECT name AS country, code, region, basic_unit
    -- From countries
    FROM countries
      -- Join to currencies
      FULL JOIN currencies
        -- Match on code
        USING (code)
    -- Where region is North America or null
    WHERE region = 'North America' OR region IS null
    -- Order by region
    ORDER BY region;

    SELECT name AS country, code, region, basic_unit
    -- From countries
    FROM countries
      -- Join to currencies
      left Join currencies
        -- Match on code
        using (code)
    -- Where region is North America or null
    WHERE region = 'North America' OR region IS NULL
    -- Order by region
    ORDER BY region;

    SELECT name AS country, code, region, basic_unit
    -- From countries
    FROM countries
      -- Join to currencies
      INNER JOIN currencies
        -- Match on code
        USING (code)
    -- Where region is North America or null
    WHERE region = 'North America' OR region IS NULL
    -- Order by region
    ORDER BY region;

- Full join (2)
    SELECT countries.name, code, languages.name AS language
    -- From languages
    FROM languages
      -- Join to countries
      full JOIN countries
        -- Match on code
        USING (code)
    -- Where countries.name starts with V or is null
    WHERE countries.name LIKE 'V%' OR countries.name IS NULL
    -- Order by ascending countries.name
    ORDER BY countries.name;

    SELECT countries.name, code, languages.name AS language
    -- From languages
    FROM languages
      -- Join to countries
      left join countries
        -- Match on code
        USING (code)
    -- Where countries.name starts with V or is null
    where countries.name LIKE 'V%' OR countries.name IS NULL
    -- Order by ascending countries.name
    ORDER BY countries.name;

    SELECT countries.name, code, languages.name AS language
    -- From languages
    FROM languages
      -- Join to countries
      INNER JOIN countries
        -- Match using code
        USING (code)
    -- Where countries.name starts with V or is null
    WHERE countries.name LIKE 'V%' OR countries.name IS NULL
    -- Order by ascending countries.name
    ORDER BY countries.name;

- Full join (3)
    -- Select fields (with aliases)
    SELECT c1.name AS country, region, l.name AS language,
           basic_unit, frac_unit
    -- From countries (alias as c1)
    FROM countries AS c1
      -- Join with languages (alias as l)
      FULL JOIN languages AS l
        -- Match on code
        USING (code)
      -- Join with currencies (alias as c2)
      FULL JOIN currencies AS c2
        -- Match on code
        USING (code)
    -- Where region like Melanesia and Micronesia
    WHERE region LIKE 'M%esia';

- A table of two cities
    -- Select fields
    SELECT c.name AS city, l.name AS language
    -- From cities (alias as c)
    FROM cities AS c        
      -- Join to languages (alias as l)
      CROSS JOIN languages AS l
    -- Where c.name like Hyderabad
    WHERE c.name LIKE 'Hyder%';

    -- Select fields
    SELECT c.name AS city, l.name AS language
    -- From cities (alias as c)
    FROM cities AS c       
      -- Join to languages (alias as l)
      INNER JOIN languages AS l
        -- Match on country code
        on c.country_code = l.code
    -- Where c.name like Hyderabad
    where c.name like 'Hyder%';

- Outer challenge
    -- Select fields
    SELECT c.name AS country,
           region,
           life_expectancy AS life_exp
    -- From countries (alias as c)
    FROM countries AS c
      -- Join to populations (alias as p)
      LEFT JOIN populations AS p
        -- Match on country code
        ON c.code = p.country_code
    -- Focus on 2010
    WHERE year = 2010
    -- Order by life_exp
    ORDER BY life_exp
    -- Limit to 5 records
    LIMIT 5;

3. Set theory clauses
- Union
    -- Select fields from 2010 table
    select *
      -- From 2010 table
      from economies2010
        -- Set theory clause
        union
    -- Select fields from 2015 table
    select *
      -- From 2015 table
      from economies2015
    -- Order by code and year
    order by code, year;

- Union (2)
    -- Select field
    select country_code
      -- From cities
      from cities
        -- Set theory clause
        union
    -- Select field
    select code
      -- From currencies
      from currencies
    -- Order by country_code
    order by country_code;

- Union all
    -- Select fields
    SELECT code, year
      -- From economies
      FROM economies
        -- Set theory clause
        UNION ALL
    -- Select fields
    SELECT country_code, year
      -- From populations
      FROM populations
    -- Order by code, year
    ORDER BY code, year;

- Intersect
    -- Select fields
    select code, year
      -- From economies
      from economies
        -- Set theory clause
        intersect
    -- Select fields
    select country_code, year
      -- From populations
      from populations
    -- Order by code and year
    order by code, year;

- Intersect (2)
    -- Select fields
    select countries.name
      -- From countries
      from countries
        -- Set theory clause
        intersect
    -- Select fields
    select cities.name
      -- From cities
      from cities;

- Except
    -- Select field
    SELECT cities.name
      -- From cities
      FROM cities
        -- Set theory clause
        except
    -- Select field
    SELECT capital
      -- From countries
      FROM countries
    -- Order by result
    ORDER BY name;

- Except (2)
    -- Select field
    select capital
      -- From countries
      from countries
        -- Set theory clause
        except
    -- Select field
    select cities.name
      -- From cities
      from cities
    -- Order by ascending capital
    order by capital;

- Semi-join
    -- Query from step 2
    SELECT DISTINCT name
      FROM languages
    -- Where in statement
    where code in
      -- Query from step 1
      -- Subquery
      (SELECT code
       FROM countries
       WHERE region = 'Middle East')
    -- Order by name
    order by name;

- Relating semi-join to a tweaked inner join

- Diagnosing problems using anti-join
    -- Select fields (with aliases)
    select code, name, basic_unit AS currency
      -- From countries (alias as c1)
      from countries as c1
        -- Join with currencies (alias as c2)
        inner join currencies as c2
        -- Match on code
        using (code)
    -- Where continent is Oceania
    where continent = 'Oceania';

    -- Select fields (with aliases)
    select code, name
      -- From countries (alias as c1)
      from countries as c1
      -- Where continent is Oceania
      where continent = 'Oceania'
        -- And code not in
        and code not in 
        -- Subquery
        (select code from currencies);

- Set theory challenge
    -- Select the city name
    select name
      -- Alias the table where city name resides
      from cities AS c1
      -- Choose only records matching the result of multiple set theory clauses
      WHERE country_code IN
    (
        -- Select appropriate field from economies AS e
        SELECT e.code
        FROM economies AS e
        -- Get all additional (unique) values of the field from currencies AS c2  
        union
        SELECT c2.code
        FROM currencies AS c2
        -- Exclude those appearing in populations AS p
        except
        SELECT p.country_code
        FROM populations AS p
    );

4. Subqueries
- Subquery inside where
    -- Select fields
    select *
      -- From populations
      from populations
    -- Where life_expectancy is greater than
    where life_expectancy >
      -- 1.15 * subquery
      1.15 * (
        select avg(life_expectancy)
        from populations
        where year = 2015
      )
      and year = 2015;

- Subquery inside where (2)
    -- Select fields
    select cities.name, country_code, urbanarea_pop
      -- From cities
      from cities
    -- Where city name in the field of capital cities
    where name IN
      -- Subquery
      (select capital
       from countries)
    ORDER BY urbanarea_pop DESC;
  
- Subquery inside select
    /*
    SELECT countries.name AS country, COUNT(*) AS cities_num
      FROM cities
        INNER JOIN countries
        ON countries.code = cities.country_code
    GROUP BY country
    ORDER BY cities_num DESC, country
    LIMIT 9;
    */

    SELECT countries.name AS country,
      -- Subquery
      (SELECT count(*)
       FROM cities
       WHERE countries.code = cities.country_code) AS cities_num
    FROM countries
    ORDER BY cities_num DESC, country
    LIMIT 9;

- Subquery inside from
    -- Select fields (with aliases)
    SELECT code, COUNT(*) AS lang_num
      -- From languages
      FROM languages
    -- Group by code
    GROUP BY code;

    -- Select fields
    select local_name, lang_num
      -- From countries
      from countries,
        -- Subquery (alias as subquery)
        (SELECT code, COUNT(*) AS lang_num
         FROM languages
         GROUP BY code) AS subquery
      -- Where codes match
      where countries.code = subquery.code
    -- Order by descending number of languages
    order by lang_num DESC;

- Advanced subquery
    -- Select fields
    Select countries.name, continent, inflation_rate
      -- From countries
      from countries
        -- Join to economies
        inner join economies
        -- Match on code
        using (code)
    -- Where year is 2015
    where year = 2015;

    -- Select the maximum inflation rate as max_inf
    Select max(inflation_rate) as max_inf
      -- Subquery using FROM (alias as subquery)
      FROM (
          SELECT name, continent, inflation_rate
          FROM countries
          INNER JOIN economies
          USING (code)
          WHERE year = 2015) AS subquery
    -- Group by continent
    Group by continent;

    -- Select fields
    SELECT name, continent, inflation_rate
      -- From countries
      FROM countries
        -- Join to economies
        INNER JOIN economies
        -- Match on code
        using (code)
      -- Where year is 2015
      WHERE year = 2015
        -- And inflation rate in subquery (alias as subquery)
        and inflation_rate in (
            SELECT MAX(inflation_rate) AS max_inf
            FROM (
                 SELECT name, continent, inflation_rate
                 FROM countries
                 INNER JOIN economies
                 on countries.code = economies.code
                 WHERE year = 2015) AS subquery
          -- Group by continent
            GROUP BY continent);

- Subquery challenge
    -- Select fields
    SELECT code, inflation_rate, unemployment_rate
      -- From economies
      FROM economies
      -- Where year is 2015 and code is not in
      WHERE year = 2015 AND code NOT IN
        -- Subquery
        (SELECT code
         FROM countries
         WHERE (gov_form = 'Constitutional Monarchy' OR gov_form LIKE '%Republic%'))
    -- Order by inflation rate
    ORDER BY inflation_rate;

- Final challenge
    -- Select fields
    SELECT DISTINCT name, total_investment, imports
      -- From table (with alias)
      FROM countries AS c
        -- Join with table (with alias)
        LEFT JOIN economies AS e
          -- Match on code
          ON (c.code = e.code
            -- and code in Subquery
            AND c.code IN (
              SELECT l.code
              FROM languages AS l
              WHERE official = 'true'
            ) )
      -- Where region and year are correct
      WHERE region = 'Central America' AND year = 2015
    -- Order by field
    ORDER BY name;

- Final challenge (2)
    -- Select fields
    SELECT region, continent, AVG(fertility_rate) AS avg_fert_rate
      -- From left table
      FROM countries AS c
        -- Join to right table
        INNER JOIN populations AS p
          -- Match on join condition
          ON c.code = p.country_code
      -- Where specific records matching some condition
      WHERE year = 2015
    -- Group appropriately?
    GROUP BY region, continent
    -- Order appropriately
    ORDER BY avg_fert_rate;

- Final challenge (3)
    -- Select fields
    SELECT name, country_code, city_proper_pop, metroarea_pop,
          -- Calculate city_perc
          city_proper_pop / metroarea_pop * 100 AS city_perc
      -- From appropriate table    
      FROM cities
      -- Where
      WHERE name IN
        -- Subquery
        (SELECT capital
         FROM countries
         WHERE (continent = 'Europe'
            OR continent LIKE '%America'))
           AND metroarea_pop IS NOT NULL
    -- Order appropriately
    ORDER BY city_perc DESC
    -- Limit amount
    LIMIT 10;




















