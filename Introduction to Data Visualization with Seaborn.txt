1. Introduction to Seaborn
- Making a scatter plot with lists
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Change this scatter plot to have percent literate on the y-axis
    sns.scatterplot(x=gdp, y=percent_literate)

    # Show plot
    plt.show()

- Making a count plot with a list
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create count plot with region on the y-axis
    sns.countplot(y=region)

    # Show plot
    plt.show()

- "Tidy" vs. "untidy" data
    # Import pandas
    import pandas as pd

    # Create a DataFrame from csv file
    df = pd.read_csv(csv_filepath)

    # Print the head of df
    print(df.head())

- Making a count plot with a DataFrame
    # Import Matplotlib, Pandas, and Seaborn
    import matplotlib.pyplot as plt
    import pandas as pd
    import seaborn as sns

    # Create a DataFrame from csv file
    df = pd.read_csv(csv_filepath)

    # Create a count plot with "Spiders" on the x-axis
    sns.countplot(x="Spiders", data=df)

    # Display the plot
    plt.show()

- Hue and scatter plots
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Change the legend order in the scatter plot
    sns.scatterplot(x="absences", y="G3", 
                    data=student_data, 
                    hue="location",
                    hue_order=["Rural", "Urban"])

    # Show plot
    plt.show()

- Hue and count plots
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create a dictionary mapping subgroup values to colors
    palette_colors = {"Rural": "green", "Urban": "blue"}

    # Create a count plot of school with location subgroups
    sns.countplot(x="school", data=student_data,
                  hue="location",
                  palette=palette_colors)

    # Display plot
    plt.show()

3. Visualizing Two Quantitative Variables
- Creating subplots with col and row
    # Change to make subplots based on study time
    sns.relplot(x="absences", y="G3", 
                data=student_data,
                kind="scatter",
                col="study_time")

    # Show plot
    plt.show()

    # Change to make subplots based on study time
    sns.relplot(x="absences", y="G3", 
                data=student_data,
                kind="scatter",
                col="study_time")

    # Show plot
    plt.show()

- Creating two-factor subplots
    # Create a scatter plot of G1 vs. G3
    sns.relplot(x="G1", y="G3", 
                data=student_data,
                kind="scatter")

    # Show plot
    plt.show()

    # Adjust to add subplots based on school support
    sns.relplot(x="G1", y="G3", 
                data=student_data,
                kind="scatter", 
                col="schoolsup",
                col_order=["yes", "no"])

    # Show plot
    plt.show()

    # Adjust further to add subplots based on family support
    sns.relplot(x="G1", y="G3", 
                data=student_data,
                kind="scatter", 
                col="schoolsup",
                col_order=["yes", "no"],
                row="famsup",
                row_order=["yes", "no"])

    # Show plot
    plt.show()

- Changing the size of scatter plot points
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create scatter plot of horsepower vs. mpg
    sns.relplot(x="horsepower", y="mpg", 
                data=mpg, kind="scatter", 
                size="cylinders")

    # Show plot
    plt.show()

    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create scatter plot of horsepower vs. mpg
    sns.relplot(x="horsepower", y="mpg", 
                data=mpg, kind="scatter", 
                size="cylinders", hue="cylinders")

    # Show plot
    plt.show()

- Changing the style of scatter plot points
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create a scatter plot of acceleration vs. mpg
    sns.relplot(x="acceleration", y="mpg", 
                data=mpg, kind="scatter", 
                style="origin", hue="origin")

    # Show plot
    plt.show()

- Interpreting line plots
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create line plot
    sns.relplot(x="model_year", y="mpg",
                data=mpg, kind="line")

    # Show plot
    plt.show()

- Visualizing standard deviation with line plots
    # Make the shaded area show the standard deviation
    sns.relplot(x="model_year", y="mpg",
                data=mpg, kind="line",
                ci="sd")


    # Show plot
    plt.show()

- Plotting subgroups in line plots
    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Create line plot of model year vs. horsepower
    sns.relplot(x="model_year", y="horsepower", 
                data=mpg, kind="line", 
                ci=None)

    # Show plot
    plt.show()

    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Change to create subgroups for country of origin
    sns.relplot(x="model_year", y="horsepower", 
                data=mpg, kind="line", 
                ci=None, style="origin", 
                hue="origin")

    # Show plot
    plt.show()

    # Import Matplotlib and Seaborn
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Add markers and make each line have the same style
    sns.relplot(x="model_year", y="horsepower", 
                data=mpg, kind="line", 
                ci=None, style="origin", 
                hue="origin", markers=True,
                dashes=False)

    # Show plot
    plt.show()

3. Visualizing a Categorical and a Quantitative Variable
- Count plots
    # Create count plot of internet usage
    sns.catplot(x="Internet usage", data=survey_data,
                kind="count")

    # Show plot
    plt.show()

    # Change the orientation of the plot
    sns.catplot(y="Internet usage", data=survey_data,
                kind="count")

    # Show plot
    plt.show()

    # Create column subplots based on age category
    sns.catplot(y="Internet usage", data=survey_data,
                kind="count", col="Age Category")

    # Show plot
    plt.show()

- Bar plots with percentages
    # Create a bar plot of interest in math, separated by gender
    sns.catplot(x="Gender", y="Interested in Math",
                data=survey_data, kind="bar")

    # Show plot
    plt.show()

- Customizing bar plots
    # Create bar plot of average final grade in each study category
    sns.catplot(x="study_time", y="G3",
                data=student_data,
                kind="bar")

    # Show plot
    plt.show()

    # Rearrange the categories
    sns.catplot(x="study_time", y="G3",
                data=student_data,
                kind="bar",
                order=["<2 hours", 
                       "2 to 5 hours", 
                       "5 to 10 hours", 
                       ">10 hours"])

    # Show plot
    plt.show()

    # Turn off the confidence intervals
    sns.catplot(x="study_time", y="G3",
                data=student_data,
                kind="bar",
                order=["<2 hours", 
                       "2 to 5 hours", 
                       "5 to 10 hours", 
                       ">10 hours"],
                ci=None)

    # Show plot
    plt.show()

- Create and interpret a box plot
    # Specify the category ordering
    study_time_order = ["<2 hours", "2 to 5 hours", 
                        "5 to 10 hours", ">10 hours"]

    # Create a box plot and set the order of the categories
    sns.catplot(x="study_time", y="G3",
                data=student_data,
                kind="box",
                order=study_time_order)

    # Show plot
    plt.show()

- Omitting outliers
    # Create a box plot with subgroups and omit the outliers
    sns.catplot(x="internet", y="G3",
                data=student_data,
                kind="box",
                hue="location",
                sym="")

    # Show plot
    plt.show()

- Adjusting the whiskers
    # Set the whiskers to 0.5 * IQR
    sns.catplot(x="romantic", y="G3",
                data=student_data,
                kind="box",
                whis=0.5)

    # Show plot
    plt.show()

    # Extend the whiskers to the 5th and 95th percentile
    sns.catplot(x="romantic", y="G3",
                data=student_data,
                kind="box",
                whis=[5, 95])

    # Show plot
    plt.show()

    # Set the whiskers at the min and max values
    sns.catplot(x="romantic", y="G3",
                data=student_data,
                kind="box",
                whis=[0, 100])

    # Show plot
    plt.show()

- Customizing point plots
    # Create a point plot of family relationship vs. absences
    sns.catplot(x="famrel", y="absences",
                data=student_data,
                kind="point")

    # Show plot
    plt.show()

    # Add caps to the confidence interval
    sns.catplot(x="famrel", y="absences",
                data=student_data,
                kind="point",
                capsize=0.2)

    # Show plot
    plt.show()

    # Remove the lines joining the points
    sns.catplot(x="famrel", y="absences",
                data=student_data,
                kind="point",
                capsize=0.2,
                join=False)

    # Show plot
    plt.show()

- Point plots with subgroups
    # Create a point plot with subgroups
    sns.catplot(x="romantic", y="absences",
                data=student_data,
                kind="point",
                hue="school")

    # Show plot
    plt.show()

    # Turn off the confidence intervals for this plot
    sns.catplot(x="romantic", y="absences",
                data=student_data,
                kind="point",
                hue="school",
                ci=None)

    # Show plot
    plt.show()

    # Import median function from numpy
    from numpy import median

    # Plot the median number of absences instead of the mean
    sns.catplot(x="romantic", y="absences",
                data=student_data,
                kind="point",
                hue="school",
                ci=None,
                estimator=median)

    # Show plot
    plt.show()

4. Customizing Seaborn Plots































