1. Preparing data
- Reading DataFrames from multiple files
    # Import pandas
    import pandas as pd

    # Read 'Bronze.csv' into a DataFrame: bronze
    bronze = pd.read_csv('Bronze.csv')

    # Read 'Silver.csv' into a DataFrame: silver
    silver = pd.read_csv('Silver.csv')

    # Read 'Gold.csv' into a DataFrame: gold
    gold = pd.read_csv('Gold.csv')

    # Print the first five rows of gold
    print(gold.head())

- Reading DataFrames from multiple files in a loop
    # Import pandas
    import pandas as pd

    # Create the list of file names: filenames
    filenames = ['Gold.csv', 'Silver.csv', 'Bronze.csv']

    # Create the list of three DataFrames: dataframes
    dataframes = []
    for filename in filenames:
        dataframes.append(pd.read_csv(filename))

    # Print top 5 rows of 1st DataFrame in dataframes
    print(dataframes[0].head())

- Combining DataFrames from multiple data files
    # Import pandas
    import pandas as pd

    # Make a copy of gold: medals
    medals = gold.copy()

    # Create list of new column labels: new_labels
    new_labels = ['NOC', 'Country', 'Gold']

    # Rename the columns of medals using new_labels
    medals.columns = new_labels

    # Add columns 'Silver' & 'Bronze' to medals
    medals['Silver'] = silver['Total']
    medals['Bronze'] = bronze['Total']

    # Print the head of medals
    print(medals.head())

- Sorting DataFrame with the Index & columns
    # Import pandas
    import pandas as pd

    # Read 'monthly_max_temp.csv' into a DataFrame: weather1
    weather1 = pd.read_csv('monthly_max_temp.csv', index_col='Month')

    # Print the head of weather1
    print(weather1.head())

    # Sort the index of weather1 in alphabetical order: weather2
    weather2 = weather1.sort_index()

    # Print the head of weather2
    print(weather2.head())

    # Sort the index of weather1 in reverse alphabetical order: weather3
    weather3 = weather1.sort_index(ascending=False)

    # Print the head of weather3
    print(weather3.head())

    # Sort weather1 numerically using the values of 'Max TemperatureF': weather4
    weather4 = weather1.sort_values('Max TemperatureF')

    # Print the head of weather4
    print(weather4.head())

- Reindexing DataFrame from a list
    # Import pandas
    import pandas as pd

    # Reindex weather1 using the list year: weather2
    weather2 = weather1.reindex(year)

    # Print weather2
    print(weather2)

    # Reindex weather1 using the list year with forward-fill: weather3
    weather3 = weather1.reindex(year).ffill()

    # Print weather3
    print(weather3)

- Reindexing using another DataFrame Index
    # Import pandas
    import pandas as pd

    # Reindex names_1981 with index of names_1881: common_names
    common_names = names_1981.reindex(names_1881.index)

    # Print shape of common_names
    print(common_names.shape)

    # Drop rows with null counts: common_names
    common_names = common_names.dropna()

    # Print shape of new common_names
    print(common_names.shape)

- Broadcasting in arithmetic formulas
    # Extract selected columns from weather as new DataFrame: temps_f
    temps_f = weather[['Min TemperatureF', 'Mean TemperatureF', 'Max TemperatureF']]

    # Convert temps_f to celsius: temps_c
    temps_c = (temps_f - 32) * 5/9

    # Rename 'F' in column names with 'C': temps_c.columns
    temps_c.columns = temps_c.columns.str.replace('F', 'C')

    # Print first 5 rows of temps_c
    print(temps_c.head())

- Computing percentage growth of GDP
    import pandas as pd

    # Read 'GDP.csv' into a DataFrame: gdp
    gdp = pd.read_csv('GDP.csv', parse_dates=True, index_col='DATE')

    # Slice all the gdp data from 2008 onward: post2008
    post2008 = gdp['2008':]

    # Print the last 8 rows of post2008
    print(post2008.tail(8))

    # Resample post2008 by year, keeping last(): yearly
    yearly = post2008.resample('A').last()

    # Print yearly
    print(yearly)

    # Compute percentage growth of yearly: yearly['growth']
    yearly['growth'] = yearly.pct_change() * 100

    # Print yearly again
    print(yearly)

- Converting currency of stocks
    # Import pandas
    import pandas as pd

    # Read 'sp500.csv' into a DataFrame: sp500
    sp500 = pd.read_csv('sp500.csv', parse_dates=True, index_col='Date')

    # Read 'exchange.csv' into a DataFrame: exchange
    exchange = pd.read_csv('exchange.csv', parse_dates=True, index_col='Date')

    # Subset 'Open' & 'Close' columns from sp500: dollars
    dollars = sp500[['Open', 'Close']]

    # Print the head of dollars
    print(dollars.head())

    # Convert dollars to pounds: pounds
    pounds = dollars.multiply(exchange['GBP/USD'], axis='rows')

    # Print the head of pounds
    print(pounds.head())

3. Merging data
- Merging on a specific column
    # Merge revenue with managers on 'city': merge_by_city
    merge_by_city = pd.merge(revenue,managers, on='city')

    # Print merge_by_city
    print(merge_by_city)

    # Merge revenue with managers on 'branch_id': merge_by_id
    merge_by_id = pd.merge(revenue,managers, on='branch_id')

    # Print merge_by_id
    print(merge_by_id)

- Merging on columns with non-matching labels
    # Merge revenue & managers on 'city' & 'branch': combined
    combined = pd.merge(revenue,managers, left_on='city', right_on='branch')

    # Print combined
    print(combined)

- Merging on multiple columns
    # Add 'state' column to revenue: revenue['state']
    revenue['state'] = ['TX','CO','IL','CA']

    # Add 'state' column to managers: managers['state']
    managers['state'] = ['TX','CO','CA','MO']

    # Merge revenue & managers on 'branch_id', 'city', & 'state': combined
    combined = pd.merge(revenue,managers,on=['branch_id', 'city', 'state'])

    # Print combined
    print(combined)

- MERGINGDATAFRAMESWITHPANDAS Whichshouldyouuse?
    df1.append(df2):stackingvertically
    pd.concat([df1, df2]):stackingmanyhorizontallyorvertically,simpleinner/outerjoinsonIndexes
    df1.join(df2):inner/outer/le/rightjoinsonIndexe
    spd.merge([df1, df2]):manyjoinsonmultiplecolumns Let'spractice

- Left & right merging on multiple columns
    # Merge revenue and sales: revenue_and_sales
    revenue_and_sales = pd.merge(revenue,sales,how='right',on=['city', 'state'])

    # Print revenue_and_sales
    print(revenue_and_sales)

    # Merge sales and managers: sales_and_managers
    sales_and_managers = pd.merge(sales,managers,how='left', left_on=['city', 'state'], right_on=['branch', 'state'])

    # Print sales_and_managers
    print(sales_and_managers)

- Merging DataFrames with outer join
    # Perform the first merge: merge_default
    merge_default = pd.merge(sales_and_managers,revenue_and_sales)

    # Print merge_default
    print(merge_default)

    # Perform the second merge: merge_outer
    merge_outer = pd.merge(sales_and_managers,revenue_and_sales,how='outer')

    # Print merge_outer
    print(merge_outer)

    # Perform the third merge: merge_outer_on
    merge_outer_on = pd.merge(sales_and_managers,revenue_and_sales,on=['city','state'], how='outer')

    # Print merge_outer_on
    print(merge_outer_on)

- Using merge_ordered()
    # Perform the first ordered merge: tx_weather
    tx_weather = pd.merge_ordered(austin,houston)

    # Print tx_weather
    print(tx_weather)

    # Perform the second ordered merge: tx_weather_suff
    tx_weather_suff = pd.merge_ordered(austin,houston, on='date', suffixes=['_aus','_hus'])

    # Print tx_weather_suff
    print(tx_weather_suff)

    # Perform the third ordered merge: tx_weather_ffill
    tx_weather_ffill = pd.merge_ordered(austin,houston, on='date', suffixes=['_aus','_hus'], fill_method='ffill')

    # Print tx_weather_ffill
    print(tx_weather_ffill)

- Using merge_asof()
    # Merge auto and oil: merged
    merged = pd.merge_asof(auto,oil,left_on='yr',right_on='Date')

    # Print the tail of merged
    print(merged.tail())

    # Resample merged: yearly
    yearly = merged.resample('A',on='Date')[['mpg','Price']].mean()

    # Print yearly
    print(yearly)

    # print yearly.corr()
    print(yearly.corr())




























