1. We'll take the CASE
- Basic CASE statements
  SELECT
    -- Select the team long name and team API id
    team_long_name,
    team_api_id
  FROM teams_germany
  -- Only include FC Schalke 04 and FC Bayern Munich
  WHERE team_long_name in ('FC Schalke 04', 'FC Bayern Munich');

  -- Identify the home team as Bayern Munich, Schalke 04, or neither
  SELECT 
      CASE WHEN hometeam_id = 10189 THEN 'FC Schalke 04'
           WHEN hometeam_id = 9823 THEN 'FC Bayern Munich'
           ELSE 'Other' END AS home_team,
    COUNT(id) AS total_matches
  FROM matches_germany
  -- Group by the CASE statement alias
  GROUP BY home_team;

- CASE statements comparing column values
  SELECT 
    -- Select the date of the match
    date,
    -- Identify home wins, losses, or ties
    CASE WHEN home_goal > away_goal THEN 'Home win!'
           WHEN home_goal < away_goal THEN 'Home loss :(' 
           ELSE 'Tie' END AS outcome
  FROM matches_spain;
  
  SELECT 
    m.date,
    --Select the team long name column and call it 'opponent'
    t.team_long_name AS opponent, 
    -- Complete the CASE statement with an alias
    CASE WHEN home_goal > away_goal THEN 'Home win!'
             WHEN home_goal < away_goal THEN 'Home loss :(' 
             ELSE 'Tie' END AS outcome
  FROM matches_spain AS m
  -- Left join teams_spain onto matches_spain
  left join teams_spain AS t
  on m.awayteam_id = t.team_api_id;

  SELECT 
    m.date,
    t.team_long_name AS opponent,
      -- Complete the CASE statement with an alias
    case when m.home_goal > away_goal THEN 'Barcelona win!'
          when m.home_goal < away_goal THEN 'Barcelona loss :(' 
          else 'Tie' end as outcome 
  FROM matches_spain AS m
  LEFT JOIN teams_spain AS t 
  ON m.awayteam_id = t.team_api_id
  -- Filter for Barcelona as the home team
  WHERE m.hometeam_id = 8634; 

- CASE statements comparing two column values part 2
    -- Select matches where Barcelona was the away team
    SELECT  
      m.date,
      t.team_long_name AS opponent,
      case when m.home_goal < m.away_goal then 'Barcelona win!'
            WHEN m.home_goal > m.away_goal then 'Barcelona loss :(' 
            else 'Tie' end as outcome
    FROM matches_spain AS m
    -- Join teams_spain to matches_spain
    LEFT JOIN teams_spain AS t 
    ON m.hometeam_id = t.team_api_id
    WHERE m.awayteam_id = 8634;

- In CASE of rivalry
    SELECT 
        date,
        -- Identify the home team as Barcelona or Real Madrid
        case when hometeam_id = 8634 then 'FC Barcelona' 
            else 'Real Madrid CF' end as home,
        -- Identify the away team as Barcelona or Real Madrid
        case when awayteam_id = 8634 then 'FC Barcelona' 
            else 'Real Madrid CF' end as away
    FROM matches_spain
    WHERE (awayteam_id = 8634 OR hometeam_id = 8634)
          AND (awayteam_id = 8633 OR hometeam_id = 8633);

    SELECT 
        date,
        CASE WHEN hometeam_id = 8634 THEN 'FC Barcelona' 
             ELSE 'Real Madrid CF' END as home,
        CASE WHEN awayteam_id = 8634 THEN 'FC Barcelona' 
             ELSE 'Real Madrid CF' END as away,
        -- Identify all possible match outcomes
        case when home_goal > away_goal and hometeam_id = 8634 then 'Barcelona win!'
            WHEN home_goal > away_goal and hometeam_id = 8633 then 'Real Madrid win!'
            WHEN home_goal < away_goal and awayteam_id = 8634 then 'Barcelona win!'
            WHEN home_goal < away_goal and awayteam_id = 8633 then 'Real Madrid win!'
            else 'Tie!' end as outcome
    FROM matches_spain
    WHERE (awayteam_id = 8634 OR hometeam_id = 8634)
          AND (awayteam_id = 8633 OR hometeam_id = 8633);

- Filtering your CASE statement
    -- Select team_long_name and team_api_id from team
    SELECT
        team_long_name,
        team_api_id
    FROM teams_italy
    -- Filter for team long name
    WHERE 	team_long_name = 'Bologna';

    -- Select the season and date columns
    SELECT 
        season,
        date,
        -- Identify when Bologna won a match
        case when hometeam_id = 9857
            and home_goal > away_goal 
            then 'Bologna Win'
            when awayteam_id = 9857 
            and away_goal > home_goal 
            then 'Bologna Win' 
            end AS outcome
    FROM matches_italy;

    -- Select the season, date, home_goal, and away_goal columns
    SELECT 
        season,
        date,
        home_goal,
        away_goal
    FROM matches_italy
    WHERE 
    -- Exclude games not won by Bologna
        case when hometeam_id = 9857 and home_goal > away_goal then 'Bologna Win'
            when awayteam_id = 9857 and away_goal > home_goal then 'Bologna Win' 
            end IS NOT null;

- COUNT using CASE WHEN
    SELECT 
        c.name AS country,
        -- Count games from the 2012/2013 season
        count(case when m.season = '2012/2013' 
                then m.id ELSE null end) AS matches_2012_2013
    FROM country AS c
    LEFT JOIN match AS m
    ON c.id = m.country_id
    -- Group by country name alias
    group by c.name;

    SELECT 
        c.name AS country,
        -- Count matches in each of the 3 seasons
        count(case when m.season = '2012/2013' then m.id end) AS matches_2012_2013,
        count(case when m.season = '2013/2014' then m.id end) AS matches_2013_2014,
        count(case when m.season = '2014/2015' then m.id end) AS matches_2014_2015
    FROM country AS c
    LEFT JOIN match AS m
    ON c.id = m.country_id
    -- Group by country name alias
    group by c.name;

- COUNT and CASE WHEN with multiple conditions
    SELECT 
        c.name AS country,
        -- Sum the total records in each season where the home team won
        SUM(CASE WHEN m.season = '2012/2013' AND m.home_goal > m.away_goal 
            THEN 1 ELSE 0 END) AS matches_2012_2013,
        SUM(CASE WHEN m.season = '2013/2014' AND m.home_goal > m.away_goal 
            THEN 1 ELSE 0 END) AS matches_2013_2014,
        SUM(CASE WHEN m.season = '2014/2015' AND m.home_goal > m.away_goal 
            THEN 1 ELSE 0 END) AS matches_2014_2015
    FROM country AS c
    LEFT JOIN match AS m
    ON c.id = m.country_id
    -- Group by country name alias
    GROUP BY country;

- Calculating percent with CASE and AVG
    SELECT 
        c.name AS country,
        -- Sum the home wins, away wins, and ties in each country
        COUNT(CASE WHEN m.home_goal > m.away_goal THEN m.id          
            END) AS home_wins,
        COUNT(CASE WHEN m.home_goal < m.away_goal THEN m.id 
            END) AS away_wins,
        COUNT(CASE WHEN m.home_goal = m.away_goal THEN m.id 
            END) AS ties
    FROM country AS c
    LEFT JOIN matches AS m
    ON c.id = m.country_id
    GROUP BY country;

    SELECT 
        c.name AS country,
        -- Calculate the percentage of tied games in each season
        AVG(CASE WHEN m.season= '2013/2014' AND m.home_goal = m.away_goal THEN 1
                 WHEN m.season= '2013/2014' AND m.home_goal != m.away_goal THEN 0
                 END) AS ties_2013_2014,
        AVG(CASE WHEN m.season= '2014/2015' AND m.home_goal = m.away_goal THEN 1
                 WHEN m.season= '2014/2015' AND m.home_goal != m.away_goal THEN 0
                 END) AS ties_2014_2015
    FROM country AS c
    LEFT JOIN matches AS m
    ON c.id = m.country_id
    GROUP BY country;

    SELECT 
        c.name AS country,
        -- Round the percentage of tied games to 2 decimal points
        ROUND(AVG(CASE WHEN m.season='2013/2014' AND m.home_goal = m.away_goal THEN 1
                 WHEN m.season='2013/2014' AND m.home_goal != m.away_goal THEN 0
                 END),2) AS pct_ties_2013_2014,
        ROUND(AVG(CASE WHEN m.season='2014/2015' AND m.home_goal = m.away_goal THEN 1
                 WHEN m.season='2014/2015' AND m.home_goal != m.away_goal THEN 0
                 END),2) AS pct_ties_2014_2015
    FROM country AS c
    LEFT JOIN matches AS m
    ON c.id = m.country_id
    GROUP BY country;

2. Short and Simple Subqueries
- Filtering using scalar subqueries
    -- Select the average of home + away goals, multiplied by 3
    SELECT 
      3 * avg(home_goal + away_goal)
    FROM matches_2013_2014;

    SELECT 
      -- Select the date, home goals, and away goals scored
        date,
      home_goal,
      away_goal
    FROM  matches_2013_2014
    -- Filter for matches where total goals exceeds 3x the average
    WHERE (home_goal + away_goal) >
           (SELECT 3 * AVG(home_goal + away_goal)
            FROM matches_2013_2014); 

- Filtering using a subquery with a list
    SELECT 
      -- Select the team long and short names
      team_long_name,
      team_short_name
    FROM team
    -- Exclude all values from the subquery
    WHERE team_api_id not in
         (select DISTINCT hometeam_id  FROM match);

- Filtering with more complex subquery conditions
    SELECT
      -- Select the team long and short names
      team_long_name,
      team_short_name
    FROM team
    -- Filter for teams with 8 or more home goals
    WHERE team_api_id in
        (SELECT hometeam_id 
           FROM match
           WHERE home_goal >= 8);

- Filtering with more complex subquery conditions
    SELECT
      -- Select the team long and short names
      team_long_name,
      team_short_name
    FROM team
    -- Filter for teams with 8 or more home goals
    WHERE team_api_id IN
        (SELECT hometeam_id 
           FROM match
           WHERE home_goal >= 8);

- Joining Subqueries in FROM
SELECT 
	-- Select the country ID and match ID
	country_id, 
    id 
FROM match
-- Filter for matches with 10 or more goals in total
WHERE (home_goal + away_goal) >= 10;

SELECT
	-- Select country name and the count match IDs
    c.name AS country_name,
    COUNT(sub.id) AS matches
FROM country AS c
-- Inner join the subquery onto country
-- Select the country id and match id columns
INNER JOIN (SELECT country_id, id 
            FROM match
            -- Filter the subquery by matches with 10+ goals
            WHERE (home_goal + away_goal) >= 10) AS sub
ON c.id = sub.country_id
GROUP BY country_name;

- Building on Subqueries in FROM
SELECT
	-- Select country, date, home, and away goals from the subquery
    country,
    date,
    home_goal,
    away_goal
FROM
	-- Select country name, date, home_goal, away_goal, and total goals in the subquery
	(SELECT c.name AS country, 
     	    m.date, 
     		m.home_goal, 
     		m.away_goal,
           (m.home_goal + m.away_goal) AS total_goals
    FROM match AS m
    LEFT JOIN country AS c
    ON m.country_id = c.id) AS subquery
-- Filter by total goals scored in the main query
WHERE total_goals >= 10;


- Add a subquery to the SELECT clause
SELECT 
	l.name AS league,
    -- Select and round the league's total goals
    ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Select and round the average total goals
    (SELECT ROUND(AVG(home_goal + away_goal),2) 
     FROM match
     WHERE season = '2013/2014') AS overall_avg
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Filter for the 2013/2014 season
WHERE m.season = '2013/2014'
GROUP BY l.name;

- Subqueries in Select for Calculations
SELECT 
	-- Select the league name and average goals scored
	l.name AS league,
	ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Subtract the overall average from the league average
	ROUND(AVG(m.home_goal + m.away_goal) - 
          (SELECT AVG(home_goal + away_goal)
           FROM match 
           WHERE season = '2013/2014'),2) AS diff
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Only include 2013/2014 results
WHERE m.season = '2013/2014'
GROUP BY l.name;

- ALL the subqueries EVERYWHERE
SELECT 
	-- Select the stage and average goals for each stage
	m.stage,
	ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Select the average overall goals for the 2012/2013 season
	ROUND((SELECT AVG(home_goal + away_goal) 
           FROM match 
           WHERE season = '2012/2013'),2) AS overall
FROM match AS m
-- Filter for the 2012/2013 season
WHERE m.season = '2012/2013'
-- Group by stage
GROUP BY m.stage;

- Add a subquery in FROM
SELECT 
	-- Select the stage and average goals from the subquery
	s.stage,
    ROUND(s.avg_goals,2) AS avg_goals
FROM 
	-- Select the stage and average goals in 2012/2013
	(SELECT
         stage,
         AVG(home_goal + away_goal) AS avg_goals
     FROM match
     WHERE season = '2012/2013'
     GROUP BY stage) AS s
WHERE 
	-- Filter the main query using the subquery
	s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                   FROM match WHERE season = '2012/2013');

- Add a subquery in SELECT
SELECT 
	-- Select the stage and average goals from s
	s.stage,
	ROUND(s.avg_goals,2) AS avg_goal,
    -- Select the overall average for 2012/2013
	(SELECT AVG(home_goal + away_goal) FROM match WHERE season = '2012/2013') AS overall_avg
FROM 
	-- Select the stage and average goals in 2012/2013 from match
	(SELECT
         stage,
         AVG(home_goal + away_goal) AS avg_goals
     FROM match
     WHERE season = '2012/2013'
     GROUP BY stage) AS s
WHERE 
	-- Filter the main query using the subquery
	s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                   FROM match WHERE season = '2012/2013');


- Basic Correlated Subqueries
SELECT 
	-- Select country ID, date, home, and away goals from match
	main.country_id,
    main.date,
    main.home_goal,
    main.away_goal
FROM match AS main
WHERE 
	-- Filter the main query by the subquery
	(home_goal + away_goal) > 
        (SELECT AVG((sub.home_goal + sub.away_goal) * 3)
         FROM match AS sub
         -- Join the main query to the subquery in WHERE
         WHERE main.country_id = sub.country_id);

- Correlated subquery with multiple conditions
SELECT 
	-- Select country ID, date, home, and away goals from match
	main.country_id,
    main.date,
    main.home_goal,
    main.away_goal
FROM match AS main
WHERE 
	-- Filter for matches with the highest number of goals scored
	(home_goal + away_goal) =
        (SELECT MAX(sub.home_goal + sub.away_goal)
         FROM match AS sub
         WHERE main.country_id = sub.country_id
               AND main.season = sub.season);

- Nested simple subqueries
SELECT 
	-- Select the season and max goals scored in a match
	season,
    MAX(home_goal + away_goal) AS max_goals,
    -- Select the overall max goals scored in a match
   (SELECT MAX(home_goal + away_goal) FROM match) AS overall_max_goals,
    -- Select the max number of goals scored in any match in July
   (SELECT MAX(home_goal + away_goal) 
        FROM match
        WHERE id IN (
              SELECT id FROM match WHERE EXTRACT(MONTH FROM date) = 07)) AS july_max_goals
FROM match
GROUP BY season;

- Nest a subquery in FROM
-- Select matches where a team scored 5+ goals
SELECT
	country_id,
    season,
	id
FROM match
WHERE home_goal >= 5 OR away_goal >= 5;

-- Count match ids
SELECT
    country_id,
    season,
    COUNT(id) AS matches
-- Set up and alias the subquery
FROM (
	SELECT
    	country_id,
    	season,
    	id
	FROM match
	WHERE home_goal >= 5 OR away_goal >= 5) 
    AS subquery
-- Group by country_id and season
GROUP BY country_id, season;

SELECT
	c.name AS country,
    -- Calculate the average matches per season
    AVG(outer_s.matches) AS avg_seasonal_high_scores
FROM country AS c
-- Left join outer_s to country
LEFT JOIN (
  SELECT country_id, season,
         COUNT(id) AS matches
  FROM (
    SELECT country_id, season, id
	FROM match
	WHERE home_goal >= 5 OR away_goal >= 5) AS inner_s
  -- Close parentheses and alias the subquery
  GROUP BY country_id, season) AS outer_s
ON c.id = outer_s.country_id
GROUP BY country;

- 


















