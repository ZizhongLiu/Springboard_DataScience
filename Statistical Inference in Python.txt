1. Graphical Exploratory Data Analysis
- Plotting a histogram of iris data
    # Import plotting modules
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Set default Seaborn style
    sns.set()

    # Plot histogram of versicolor petal lengths
    _ = plt.hist(versicolor_petal_length)

    # Show histogram
    plt.show()

- Axis labels!
    # Plot histogram of versicolor petal lengths
    _ = plt.hist(versicolor_petal_length)

    # Label axes
    _ = plt.ylabel('count')
    _ = plt.xlabel('petal length (cm)')


    # Show histogram
    plt.show()

- Adjusting the number of bins in a histogram
    # Import numpy
    import numpy as np

    # Compute number of data points: n_data
    n_data = len(versicolor_petal_length)

    # Number of bins is the square root of number of data points: n_bins
    n_bins = np.sqrt(n_data)

    # Convert number of bins to integer: n_bins
    n_bins = int(n_bins)

    # Plot the histogram
    _ = plt.hist(versicolor_petal_length, bins=n_bins)

    # Label axes
    _ = plt.xlabel('petal length (cm)')
    _ = plt.ylabel('count')

    # Show histogram
    plt.show()

- Bee swarm plot
    # Create bee swarm plot with Seaborn's default settings
    _ = sns.swarmplot(x='species', y='petal length (cm)', data=df)

    # Label the axes
    _ = plt.xlabel('species')
    _ = plt.ylabel('petal length (cm)')

    # Show the plot
    plt.show()

- Computing the ECDF
    def ecdf(data):
        """Compute ECDF for a one-dimensional array of measurements."""
        # Number of data points: n
        n = len(data)

        # x-data for the ECDF: x
        x = np.sort(data)

        # y-data for the ECDF: y
        y = np.arange(1, n+1) / n

        return x, y

- Plotting the ECDF
    # Compute ECDF for versicolor data: x_vers, y_vers
    x_vers, y_vers = ecdf(versicolor_petal_length)

    # Generate plot
    _ = plt.plot(x_vers, y_vers, marker='.', linestyle='none')

    # Label the axes
    _ = plt.xlabel('petal length (cm)')
    _ = plt.ylabel('ECDF')

    # Display the plot
    plt.show()

- Comparison of ECDFs
    # Compute ECDFs
    x_set, y_set = ecdf(setosa_petal_length)
    x_vers, y_vers = ecdf(versicolor_petal_length)
    x_virg, y_virg = ecdf(virginica_petal_length)

    # Plot all ECDFs on the same plot
    _ = plt.plot(x_set, y_set, marker='.', linestyle='none')
    _ = plt.plot(x_vers, y_vers, marker='.', linestyle='none')
    _ = plt.plot(x_virg, y_virg, marker='.', linestyle='none')

    # Annotate the plot
    _ = plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
    _ = plt.xlabel('petal length (cm)')
    _ = plt.ylabel('ECDF')

    # Display the plot
    plt.show()

2. Quantitative Exploratory Data Analysis
- Computing means
# Compute the mean
mean_length_vers = np.mean(versicolor_petal_length)

# Print the results with some nice formatting
print('I. versicolor:', mean_length_vers, 'cm')

- Computing percentiles
# Specify array of percentiles: percentiles
percentiles = np.array([2.5, 25, 50, 75, 97.5])

# Compute percentiles: ptiles_vers
ptiles_vers = np.percentile(versicolor_petal_length, percentiles)

# Print the result
print(ptiles_vers)

- Comparing percentiles to ECDF
# Plot the ECDF
_ = plt.plot(x_vers, y_vers, '.')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Overlay percentiles as red x's
_ = plt.plot(ptiles_vers, percentiles/100, marker='D', color='red',
         linestyle='none')

# Show the plot
plt.show()

- Box-and-whisker plot
# Create box plot with Seaborn's default settings
_ = sns.boxplot(x='species', y='petal length (cm)', data=df)

# Label the axes
_ = plt.xlabel('species')
_ = plt.ylabel('petal length (cm)')

# Show the plot
plt.show()

- Computing the variance
# Array of differences to mean: differences
differences = versicolor_petal_length - np.mean(versicolor_petal_length)

# Square the differences: diff_sq
diff_sq = differences**2

# Compute the mean square difference: variance_explicit
variance_explicit = np.mean(diff_sq)

# Compute the variance using NumPy: variance_np
variance_np = np.var(versicolor_petal_length)

# Print the results
print(variance_explicit, variance_np)

- The standard deviation and the variance
# Compute the variance: variance
variance = np.var(versicolor_petal_length)

# Print the square root of the variance
print(np.sqrt(variance))

# Print the standard deviation
print(np.std(versicolor_petal_length))

- Scatter plots
# Make a scatter plot
_ = plt.plot(versicolor_petal_length, versicolor_petal_width,
             marker='.', linestyle='none')

# Label the axes
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('petal width (cm)')

# Show the result
plt.show()

- Computing the covariance
# Compute the covariance matrix: covariance_matrix
covariance_matrix = np.cov(versicolor_petal_length, versicolor_petal_width)

# Print covariance matrix
print(covariance_matrix)

# Extract covariance of length and width of petals: petal_cov
petal_cov = covariance_matrix[0,1]

# Print the length/width covariance
print(petal_cov)

- Computing the Pearson correlation coefficient
def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""
    # Compute correlation matrix: corr_mat
    corr_mat = np.corrcoef(x, y)

    # Return entry [0,1]
    return corr_mat[0,1]

# Compute Pearson correlation coefficient for I. versicolor
r = pearson_r(versicolor_petal_width, versicolor_petal_length)

# Print the result
print(r)

4.Thinking Probabilistically-- Continuous Variables
- The Normal PDF
# Draw 100000 samples from Normal distribution with stds of interest: samples_std1, samples_std3, samples_std10
samples_std1 = np.random.normal(20, 1, size=100000)
samples_std3 = np.random.normal(20, 3, size=100000)
samples_std10 = np.random.normal(20, 10, size=100000)

# Make histograms
_ = plt.hist(samples_std1, bins=100, normed=True, histtype='step')
_ = plt.hist(samples_std3, bins=100, normed=True, histtype='step')
_ = plt.hist(samples_std10, bins=100, normed=True, histtype='step')

# Make a legend, set limits and show plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'))
plt.ylim(-0.01, 0.42)
plt.show()

-The Normal CDF
# Generate CDFs
x_std1, y_std1 = ecdf(samples_std1)
x_std3, y_std3 = ecdf(samples_std3)
x_std10, y_std10 = ecdf(samples_std10)

# Plot CDFs
_ = plt.plot(x_std1, y_std1, marker='.', linestyle='none')
_ = plt.plot(x_std3, y_std3, marker='.', linestyle='none')
_ = plt.plot(x_std10, y_std10, marker='.', linestyle='none')

# Make a legend and show the plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'), loc='lower right')
plt.show()

- Are the Belmont Stakes results Normally distributed?
# Compute mean and standard deviation: mu, sigma
mu = np.mean(belmont_no_outliers)
sigma = np.std(belmont_no_outliers)

# Sample out of a normal distribution with this mu and sigma: samples
samples = np.random.normal(mu, sigma, size=10000)

# Get the CDF of the samples and of the data
x_theor, y_theor = ecdf(samples)
x, y = ecdf(belmont_no_outliers)

# Plot the CDFs and show the plot
_ = plt.plot(x_theor, y_theor)
_ = plt.plot(x, y, marker='.', linestyle='none')
_ = plt.xlabel('Belmont winning time (sec.)')
_ = plt.ylabel('CDF')
plt.show()

- What are the chances of a horse matching or beating Secretariat's record?
# Take a million samples out of the Normal distribution: samples
samples = np.random.normal(mu, sigma, size=1000000)

# Compute the fraction that are faster than 144 seconds: prob
prob = np.sum(samples <= 144) / len(samples)

# Print the result
print('Probability of besting Secretariat:', prob)

- If you have a story, you can simulate it!
def successive_poisson(tau1, tau2, size=1):
    """Compute time for arrival of 2 successive Poisson processes."""
    # Draw samples out of first exponential distribution: t1
    t1 = np.random.exponential(tau1, size=size)

    # Draw samples out of second exponential distribution: t2
    t2 = np.random.exponential(tau2, size=size)

    return t1 + t2

- Distribution of no-hitters and cycles
# Draw samples of waiting times
waiting_times = successive_poisson(764, 715, size=100000)

# Make the histogram
_ = plt.hist(waiting_times, bins=100, histtype='step',
             normed=True)

# Label axes
_ = plt.xlabel('total waiting time (games)')
_ = plt.ylabel('PDF')

# Show the plot
plt.show()































