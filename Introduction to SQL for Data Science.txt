1. Introduction to SQL for Data Science
- Onboarding | Tables

- Onboarding | Query Result
    SELECT name FROM people;

- Onboarding | Errors
    -- Try running me!
    SELECT 'DataCamp <3 SQL'
    AS result;
    
- Onboarding | Multi-step Exercises
    SELECT 'SQL is cool'
    AS result;

- SELECTing single columns
    SELECT name
    FROM people;
    
    select name
    from people;

- SELECTing multiple columns
    select title from films;

    SELECT title, release_year FROM films;

    SELECT title, release_year, country FROM films;

    SELECT * FROM films;

- SELECT DISTINCT
    SELECT DISTINCT language FROM films;
    select distinct certification from films;
    select distinct role from roles

- Learning to COUNT
    SELECT COUNT(*) FROM reviews;

- Practice with COUNT
    SELECT COUNT(*) FROM people;
    SELECT COUNT(birthdate) FROM people;
    SELECT COUNT(distinct birthdate) FROM people;

2. Filtering rows
- Simple filtering of numeric values
    SELECT * FROM films WHERE release_year = 2016;
    select count(*) from films where release_year<2000;
    select title, release_year from films where release_year>2000;

- Simple filtering of text
    select * from films where language = 'French';
    select name, birthdate from people where birthdate='1974-11-11';
    select count(*) from films where language = 'Hindi';
    select * from films where certification='R';

- WHERE AND
    select title, release_year from films where release_year<2000 and language='Spanish';
    select * from films where release_year>2000 and language='Spanish';
    select * from films where language='Spanish' and release_year > 2000 and release_year < 2010;

- WHERE AND OR (2)
    SELECT title, release_year FROM films WHERE release_year >= 1990 and release_year < 2000;
    SELECT title, release_year FROM films WHERE (release_year >= 1990 AND release_year < 2000) AND (language = 'French' or language = 'Spanish');
    SELECT title, release_year FROM films WHERE (release_year >= 1990 AND release_year < 2000) AND (language = 'French' OR language = 'Spanish') AND gross > 2000000;

- BETWEEN (2)
    SELECT title, release_year FROM films WHERE release_year between 1990 and 2000;
    SELECT title, release_year FROM films WHERE release_year BETWEEN 1990 AND 2000 and budget > 100000000;
    SELECT title, release_year FROM films WHERE release_year BETWEEN 1990 AND 2000 AND budget > 100000000 and language = 'Spanish';
    SELECT title, release_year FROM films WHERE release_year BETWEEN 1990 AND 2000 AND budget > 100000000 and (language = 'Spanish' or language = 'French');

- WHERE IN
    SELECT title, release_year FROM films WHERE release_year in (1990, 2000) and duraction>120;
    select title, language from films where language in ('English', 'Spanish', 'French');
    select title, certification from films where certification in ('NC-17', 'R');

- NULL and IS NULL
    SELECT name FROM people WHERE deathdate IS NULL;
    select title from films where budget is null;
    select count(*) from films where language is null;

- LIKE and NOT LIKE
    select name from people where name LIKE 'B%';
    select name from people where name LIKE '_r%';
    select name from people where name NOT LIKE 'A%';

3 Aggregate Functions
- Aggregate Functions
    select sum(duration) from films
    select avg(duration) from films;
    select min(duration) from films;
    select max(duration) from films;

- Aggregate functions practice
    select sum(gross) from films;
    select avg(gross) from films;

- Combining aggregate functions with WHERE
    select sum(gross) from films where release_year>=2000;
    select avg(gross) from films where title like 'A%';
    select min(gross) from films where release_year=1994;
    select max(gross) from films where release_year between 2000 and 2012;

- It's AS simple AS aliasing
    select title, (gross-budget) as net_profit from films;
    select title, (duration/60.0) as duration_hours from films;
    select avg(duration)/60.0 as avg_duration_hours from films;

- Even more aliasing
    -- get the count(deathdate) and multiply by 100.0
    -- then divide by count(*)
    select count(deathdate) * 100.0 / count(*) as percentage_dead from people;
    select max(release_year)-min(release_year) as difference from films;
    select (max(release_year)-min(release_year))/10 as number_of_decades from films;
    
    
4. Sorting and grouping
- Sorting single columns    
    select name from people order by name;
    select name from people order by birthdate;
    select name, birthdate from people order by birthdate;

- Sorting single columns (2)
    select title from films where release_year in (2000,2012) order by release_year;
    select * from films where release_year <> 2015 order by duration;
    SELECT title, gross FROM films WHERE title LIKE 'M%' ORDER BY title;
        
- Sorting single columns (DESC)
    select imdb_score, film_id from reviews order by imdb_score desc;
    select title from films order by title desc;
    select title, duration from films order by duration desc;

- Sorting multiple columns
    select birthdate, name from people order by birthdate, name;
    select release_year, duration, title from films order by release_year, duration;
    select certification, release_year, title from films order by certification,release_year;
    select name, birthdate from people order by name, birthdate;

- GROUP BY practice
    select release_year, count(*) from films group by release_year;
    select release_year, avg(duration) from films group by release_year;
    select release_year, max(budget) from films group by release_year;
    select imdb_score, count(*) from reviews group by imdb_score;

- GROUP BY practice (2)
    select release_year, min(gross) from films group by release_year;
    select language, sum(gross) from films group by language;
    select country, sum(budget) from films group by country;
    select release_year, country, max(budget) from films group by release_year, country order by release_year,country;
    select country, release_year, min(gross) from films group by release_year, country order by country, release_year;

- HAVING a great time
    SELECT release_year FROM films GROUP BY release_year HAVING COUNT(title) > 200;
    
- All together now
    SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
    FROM films
    WHERE release_year > 1990
    GROUP BY release_year
    HAVING AVG(budget) > 60000000
    order by avg_gross desc;

- All together now (2)
    -- select country, average budget, 
    select country, AVG(budget) AS avg_budget,
    --     and average gross
    AVG(gross) AS avg_gross
    -- from the films table
    from films
    -- group by country 
    group by country
    -- where the country has more than 10 titles
    having count(title) > 10
    -- order by country
    order by country
    -- limit to only show 5 results
    limit 5;

- A taste of things to come
    SELECT title, imdb_score
    FROM films
    JOIN reviews
    ON films.id = reviews.film_id
    WHERE title = 'To Kill a Mockingbird';









    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
