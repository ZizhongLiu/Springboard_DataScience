


3. Meet the collections module
- Using Counter on lists
    # Import the Counter object
    from collections import Counter
    # Print the first ten items from the stations list
    print(station[:10])
    # Create a Counter of the stations list: station_count
    station_count = Counter(station)
    # Print the station_count
    print(station_count)

- Finding most common elements
    # Import the Counter object
    from collections import Counter

    # Create a Counter of the stations list: station_count
    station_count = Counter(stations)

    # Find the 5 most common elements
    print(station_count.most_common(5))

- Creating dictionaries of an unknown structure
    # Create an empty dictionary: ridership
    ridership = {}

    # Iterate over the entries
    for date,stop,riders in entries:
        # Check to see if date is already in the ridership dictionary
        if date not in ridership:
            # Create an empty list for any missing date
            ridership[date] = []
        # Append the stop and riders as a tuple to the date keys list
        ridership[date].append((stop,riders))

    # Print the ridership for '03/09/2016'
    print(ridership['03/09/2016'])

- Safely appending to a key's value list
    # Import defaultdict
    from collections import defaultdict

    # Create a defaultdict with a default type of list: ridership
    ridership = defaultdict(list)

    # Iterate over the entries
    for date, stop, riders in entries:
        # Use the stop as the key of ridership and append the riders to its value
        ridership[stop].append(riders)

    # Print the first 10 items of the ridership dictionary
    print(list(ridership.items())[:10])
    
- Working with OrderedDictionaries
    # Import OrderedDict from collections
    from collections import OrderedDict

    # Create an OrderedDict called: ridership_date
    ridership_date = OrderedDict()

    # Iterate over the entries
    for date,riders in entries:
        # If a key does not exist in ridership_date, set it to 0
        if  date not in ridership_date:
            ridership_date[date] = 0

        # Add riders to the date key in ridership_date
        ridership_date[date] += riders

    # Print the first 31 records
    print(list(ridership_date.items())[:31])
    
  - Powerful Ordered popping
    # Print the first key in ridership_date
    print(list(ridership_date.keys())[0])

    # Pop the first item from ridership_date and print it
    print(ridership_date.popitem(0))

    # Print the last key in ridership_date
    print(list(ridership_date.keys())[-1])

    # Pop the last item from ridership_date and print it
    print(ridership_date.popitem(-1))
    
- Creating namedtuples for storing data
    # Import namedtuple from collections
    from collections import namedtuple

    # Create the namedtuple: DateDetails
    DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])

    # Create the empty list: labeled_entries
    labeled_entries = []

    # Iterate over the entries list
    for date, stop, riders in entries:
        # Append a new DateDetails namedtuple instance for each entry to labeled_entries
        labeled_entries.append(DateDetails(date,stop,riders))

    # Print the first 5 items in labeled_entries
    print(labeled_entries[:5])
    
- Leveraging attributes on namedtuples
    # Iterate over the first twenty items in labeled_entries
    for item in labeled_entries[:20]:
        # Print each item's stop
        print(item.stop)
        # Print each item's date
        print(item.date)
        # Print each item's riders
        print(item.riders)

  
4. Handling Dates and Times
- Strings to DateTimes
    # Import the datetime object from datetime
    from datetime import datetime

    # Iterate over the dates_list 
    for date_str in dates_list:
        # Convert each date to a datetime object: date_dt
        date_dt = datetime.strptime(date_str,'%m/%d/%Y')

        # Print each date_dt
        print(date_dt)

- Converting to a String
    # Loop over the first 10 items of the datetimes_list
    for item in datetimes_list[:10]:
        # Print out the record as a string in the format of 'MM/DD/YYYY'
        print(item.strftime('%m/%d/%Y'))

        # Print out the record as an ISO standard string
        print(item.isoformat())

- Pieces of Time
    # Create a defaultdict of an integer: monthly_total_rides
    monthly_total_rides = defaultdict(int)

    # Loop over the list daily_summaries
    for daily_summary in daily_summaries:
        # Convert the service_date to a datetime object
        service_datetime = datetime.strptime(daily_summary[0],'%m/%d/%Y')

        # Add the total rides to the current amount for the month
        monthly_total_rides[service_datetime.month] += int(daily_summary[4])

    # Print monthly_total_rides
    print(monthly_total_rides)
    
- Creating DateTime Objects... Now
    # Import datetime from the datetime module
    from datetime import datetime

    # Compute the local datetime: local_dt
    local_dt = datetime.now()

    # Print the local datetime
    print(local_dt)

    # Compute the UTC datetime: utc_dt
    utc_dt = datetime.utcnow()

    # Print the UTC datetime
    print(utc_dt)
    
- Timezones
    # Create a Timezone object for Chicago
    chicago_usa_tz = timezone('US/Central')

    # Create a Timezone object for New York
    ny_usa_tz = timezone('US/Eastern')

    # Iterate over the daily_summaries list
    for orig_dt, ridership in daily_summaries:

        # Make the orig_dt timezone "aware" for Chicago
        chicago_dt = orig_dt.replace(tzinfo = chicago_usa_tz)

        # Convert chicago_dt to the New York Timezone
        ny_dt = chicago_dt.astimezone(ny_usa_tz)

        # Print the chicago_dt, ny_dt, and ridership
        print('Chicago: %s, NY: %s, Ridership: %s' % (chicago_dt, ny_dt, ridership))

- Finding a time in the future and from the past
    # Import timedelta from the datetime module
    from datetime import timedelta

    # Build a timedelta of 30 days: glanceback
    glanceback = timedelta(days = 30)

    # Iterate over the review_dates as date
    for date in review_dates:
        # Calculate the date 30 days back: prior_period_dt
        prior_period_dt = date - glanceback

        # Print the review_date, day_type and total_ridership
        print('Date: %s, Type: %s, Total Ridership: %s' %
             (date, 
              daily_summaries[date]['day_type'], 
              daily_summaries[date]['total_ridership']))

        # Print the prior_period_dt, day_type and total_ridership
        print('Date: %s, Type: %s, Total Ridership: %s' %
             (prior_period_dt, 
              daily_summaries[prior_period_dt]['day_type'], 
              daily_summaries[prior_period_dt]['total_ridership']))
              
- Finding differences in DateTimes
    # Iterate over the date_ranges
    for start_date, end_date in date_ranges:
        # Print the End and Start Date
        print(end_date, start_date)
        # Print the difference between each end and start date
        print(end_date-start_date)
        
-  Localizing time with pendulum
    # Import the pendulum module
    import pendulum

    # Create a now datetime for Tokyo: tokyo_dt
    tokyo_dt = pendulum.now('Asia/Tokyo')

    # Covert the tokyo_dt to Los Angeles: la_dt
    la_dt = tokyo_dt.in_timezone('America/Los_Angeles')

    # Print the ISO 8601 string of la_dt
    print(la_dt.to_iso8601_string())

- Humanizing Differences with Pendulum
    # Iterate over date_ranges
    for start_date,end_date in date_ranges:

        # Convert the start_date string to a pendulum date: start_dt 
        start_dt = pendulum.parse(start_date, strict = False)

        # Convert the end_date string to a pendulum date: end_dt 
        end_dt = pendulum.parse(end_date, strict = False)

        # Print the End and Start Date
        print(end_dt, start_dt)

        # Calculate the difference between end_dt and start_dt: diff_period
        diff_period = end_dt - start_dt

        # Print the difference in days
        print(diff_period.in_days())

5. Answering Data Science Questions
- Reading your data with CSV Reader and Establishing your Data Containers
    # Import the csv module
    import csv

    # Create the file object: csvfile
    csvfile = open('crime_sampler.csv', 'r')

    # Create an empty list: crime_data
    crime_data = []

    # Loop over a csv reader on the file object
    for row in csv.reader(csvfile):

        # Append the date, type of crime, location description, and arrest
        crime_data.append((row[0], row[2], row[4], row[5]))

    # Remove the first element from crime_data
    crime_data.pop(0)

    # Print the first 10 records
    print(crime_data[:10])

- Find the Months with the Highest Number of Crimes
    # Import necessary modules
    from collections import Counter
    from datetime import datetime

    # Create a Counter Object: crimes_by_month
    crimes_by_month = Counter()

    # Loop over the crime_data list
    for item in crime_data:

        # Convert the first element of each item into a Python Datetime Object: date
        date = datetime.strptime(item[0], '%m/%d/%Y %I:%M:%S %p')

        # Increment the counter for the month of the row by one
        crimes_by_month[date.month] += 1

    # Print the 3 most common months for crime
    print(crimes_by_month.most_common(3))
    
- Transforming your Data Containers to Month and Location
    # Import necessary modules
    from collections import defaultdict
    from datetime import datetime

    # Create a dictionary that defaults to a list: locations_by_month
    locations_by_month = defaultdict(list)

    # Loop over the crime_data list
    for row in crime_data:
        # Convert the first element to a date object
        date = datetime.strptime(row[0], '%m/%d/%Y %I:%M:%S %p')

        # If the year is 2016 
        if date.year == 2016:
            # Set the dictionary key to the month and append the location (fifth element) to the values list
            locations_by_month[date.month].append(row[4])

    # Print the dictionary
    print(locations_by_month)

- Find the Most Common Crimes by Location Type by Month in 2016
    # Import Counter from collections
    from collections import Counter

    # Loop over the items from locations_by_month using tuple expansion of the month and locations
    for month,locations in locations_by_month.items():
        # Make a Counter of the locations
        location_count = Counter(locations)
        # Print the month 
        print(month)
        # Print the most common location
        print(location_count.most_common(5))

- Reading your Data with DictReader and Establishing your Data Containers
    # Create the CSV file: csvfile
    csvfile = open('crime_sampler.csv', 'r')

    # Create a dictionary that defaults to a list: crimes_by_district
    crimes_by_district = defaultdict(list)

    # Loop over a DictReader of the CSV file
    for row in csv.DictReader(csvfile):
        # Pop the district from each row: district
        district = row.pop('District')
        # Append the rest of the data to the list for proper district in crimes_by_district
        crimes_by_district[district].append(row)

- Determine the Arrests by District by Year
    # Loop over the crimes_by_district using expansion as district and crimes
    for district, crimes in crimes_by_district.items():
        # Print the district
        print(district)

        # Create an empty Counter object: year_count
        year_count = Counter()

        # Loop over the crimes:
        for crime in crimes:
            # If there was an arrest
            if crime['Arrest'] == 'true':
                # Convert the Date to a datetime and get the year
                year = datetime.strptime(crime['Date'], '%m/%d/%Y %I:%M:%S %p').year
                # Increment the Counter for the year
                year_count[year] += 1

        # Print the counter
    print(year_count)


- Unique Crimes by City Block
    # Create a unique list of crimes for the first block: n_state_st_crimes
    n_state_st_crimes = set(crimes_by_block['001XX N STATE ST'])

    # Print the list
    print(n_state_st_crimes)

    # Create a unique list of crimes for the second block: w_terminal_st_crimes
    w_terminal_st_crimes = set(crimes_by_block['0000X W TERMINAL ST'])

    # Print the list
    print(w_terminal_st_crimes)

    # Find the differences between the two blocks: crime_differences
    crime_differences = n_state_st_crimes.difference(w_terminal_st_crimes)

    # Print the differences
    print(crime_differences)

- 




    
